# 假设有个coffee选购平台，客户可以在平台上下单，平台根据用户位置进行线下配送
# coffee对象构造
class Coffee:
    name = ''
    price = 0
    def __init__(self,name):
        self.name = name
        self.price = len(name)
    def show(self):
        print("Coffee Name:%s Price:%s"%(self.name,self.price))
# 实际业务中，coffee价格由配置表进行配置，或者调用接口获取，这里就是用到了享元模式，此处将coffee price定为name
# 客户类构造
class Customer:
    name = ''
    def __init__(self,name):
        self.name = name
    def order(self,coffee_name):
        print("%s ordered a cup of coffee%s"%(self.name,coffee_name))
        return Coffee(coffee_name)
# 按照正常流程，用户在网上预定了coffee，其代表customer类生产一个coffee类，这里就是Prototype模式，
# 将一个对象再创建两一个可定制的对象，java中通过clone（）方法可以很好的进行，python中此处在高并发的情况下引入“工厂类”
# 工厂类
class CoffeeFactory():
    coffee_dict = {}
    def getCoffee(self,name):
        if self.coffee_dict.__contains__(name) == False:
            self.coffee_dict[name] = Coffee(name)
        return self.coffee_dict[name]
    def getCoffeeCount(self):
        return len(self.coffee_dict)

# coffeeFactory中，get直接返回当前实例个数，然后重写Customer
# 重写后的Customer
class Customer:
    coffee_factory = ""
    name = ""
    def __init__(self,name,cofee_factory):
        self.name =name
        self.coffee_factory
    def order(self,coffee_name):
        print("%s ordered a cup of coffee:%s"%(self.name,coffee_name))
        return self.coffee_factory.getCoffee(coffee_name)
# 业务模拟
if __name__ == "__main__":
    coffee_factory = CoffeeFactory()
    customer_1 = Customer("倪鑫", coffee_factory)
    customer_2 = Customer("徐家宸", coffee_factory)
    customer_3 = Customer("童斌", coffee_factory)
    customer_4 = Customer("兰光宇", coffee_factory)

c1_capp = customer_1.order("蓝山")
c1_capp.show()
c2_capp = customer_2.order("蓝山")
c2_capp.show()
c3_mocha = customer_3.order("mocha")
c3_mocha.show()
c4_mocha = customer_4.order("mocha")
c4_mocha.show()

print("Num of Coffee Instance : %s"%coffee_factory.getCoffeeCount())

